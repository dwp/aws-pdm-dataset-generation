jobs:
  - name: apply-and-test-with-ami
    max_in_flight: 1
    serial_groups: [qa-applies]
    plan:
      - in_parallel:
          - get: meta
            resource: meta-qa
            trigger: false
          - get: aws-pdm-dataset-generation
            trigger: false
            passed:
              - pdm-dataset-generation-qa
          - get: dataworks-behavioural-framework
            trigger: false
            passed:
              - pdm-dataset-generation-qa
          - get: emr-launcher-release
            version: { tag: ((emr-launcher-version.qa)) }
            trigger: false
            passed:
              - pdm-dataset-generation-qa
          - get: emr-relauncher-release
            version: { tag: ((emr-relauncher-version.qa)) }
            trigger: false
            passed:
              - pdm-dataset-generation-qa
          - get: al2-emr-ami
            resource: untested-al2-emr-ami
            trigger: true
      - .: (( inject meta.plan.terraform-bootstrap ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
      - .: (( inject meta.plan.terraform-apply ))
        config:
          params:
            TF_WORKSPACE: qa
            TEST_AMI_RUN: true
      - .: (( inject meta.plan.terraform-plan ))
        config:
          params:
            TF_WORKSPACE: qa
            TEST_AMI_RUN: true
      - in_parallel:
        - .: (( inject meta.plan.run-behave-job ))
          config:
            params:
              E2E_FEATURE_TAG_FILTER: aws-pdm-dataset-generation
              AWS_ACC: ((aws_account.qa))
              AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci

    on_failure:
      do:
        - .: (( inject meta.plan.ami-test-results ))
          task: ami-test-result-fail
          config:
            params:
              RESULT: FAILED
    on_success:
      do:
        - .: (( inject meta.plan.ami-test-results ))
          task: ami-test-result-success
          config:
              params:
                RESULT: SUCCESS

