jobs:
  - name: pdm-dataset-generation-pr
    plan:
      - in_parallel:
          - get: aws-pdm-dataset-generation-pr
            trigger: true
            version: every
          - get: emr-launcher-release
            version: { tag: ((emr-launcher-version.qa)) }
            trigger: true
          - get: emr-relauncher-release
            version: { tag: ((emr-relauncher-version.qa)) }
            trigger: true
          - get: al2-emr-ami
            trigger: true
      - put: aws-pdm-dataset-generation-pr
        params:
          path: aws-pdm-dataset-generation-pr
          status: pending
      - task: linting-shell
        input_mapping:
          aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: koalaman/shellcheck-alpine
              tag: latest
          run:
            path: sh
            args:
              - -exc
              - |
                find . -name "*.sh" ! -name "cloudwatch.sh" ! -name "row-count.sh" | cat >> shell-list

                # Ignore SC2154 as it will fail all terraform vars that are passed to scripts
                # Ignore SC1091 due to sourcing of files that aren't in the same path locally so shellcheck will fail, but these files are on the boxes
                for i in $(cat shell-list); do shellcheck -e SC2154 -e SC1091 -e SC2001 -e SC2034 $i; done
            dir: aws-pdm-dataset-generation
          inputs:
            - name: aws-pdm-dataset-generation
      - .: (( inject meta.plan.terraform-bootstrap ))
        input_mapping:
          aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr
      # - .: (( inject meta.plan.unit-tests ))
      #   input_mapping:
      #     aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr
      #   on_failure:
      #     put: aws-pdm-dataset-generation-pr
      #     params:
      #       path: aws-pdm-dataset-generation-pr
      #       status: failure
      - task: terraform-plan
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((dataworks.terraform_repository))
              tag: ((dataworks.terraform_13_version))
          params:
            TF_INPUT: false
            TF_CLI_ARGS_apply: -lock-timeout=300s
            TF_CLI_ARGS_plan: -lock-timeout=300s
            TF_IN_AUTOMATION: true
            TF_WORKSPACE: qa
          run:
            path: sh
            dir: aws-pdm-dataset-generation
            args:
              - -exc
              - |
                terraform fmt -recursive -check=true
                cp ../terraform-config/terraform.tf .
                cp ../terraform-config/terraform.tfvars .
                export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
                export TF_VAR_pdm_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
                export TF_VAR_pdm_emr_relauncher_zip="{base_path = \"../emr-relauncher-release\", version = \"$(cat ../emr-relauncher-release/version)\"}"
                terraform init
                terraform workspace show
                terraform plan
          inputs:
            - name: aws-pdm-dataset-generation
            - name: terraform-config
            - name: emr-launcher-release
            - name: emr-relauncher-release
            - name: al2-emr-ami
        input_mapping:
          aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr
        on_failure:
          put: aws-pdm-dataset-generation-pr
          params:
            path: aws-pdm-dataset-generation-pr
            status: failure
        on_success:
          put: aws-pdm-dataset-generation-pr
          params:
            path: aws-pdm-dataset-generation-pr
            status: success
