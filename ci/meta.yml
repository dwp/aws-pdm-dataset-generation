meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.5
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    terraform-bootstrap:
      task: terraform-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-pdm-dataset-generation
        inputs:
          - name: aws-pdm-dataset-generation
        outputs:
          - name: terraform-config

    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
        run:
          path: sh
          dir: aws-pdm-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_pdm_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-pdm-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-ami

    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_plan: -lock-timeout=300s
        run:
          path: sh
          dir: aws-pdm-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_pdm_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -detailed-exitcode
        inputs:
          - name: aws-pdm-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-ami

    terraform-output-management-infra:
      task: terraform-output-management-infra
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-management-infra/outputs.json
          dir: aws-management-infrastructure
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management-infra
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/hiverunner
        run:
          path: sh
          dir: aws-pdm-dataset-generation/steps
          args:
            - -exc
            - |
              mvn test
        inputs:
          - name: aws-pdm-dataset-generation
      input_mapping:
        aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr

    vcs-to-s3:
      task: vcs-to-s3
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          S3_BUCKET: ((dataworks.bucket-list.development.published))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set -x
              RESOURCE=$(ls)
              cd $RESOURCE/$RESOURCE_ROOT
              aws s3 sync . s3://$S3_BUCKET/$S3_ROOT --exclude "*" --include "$RESOURCE_FILES"

    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              aws lambda invoke --function-name adg_emr_launcher outfile
    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("pdm-dataset-generator")) | .Id');
              do
                aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done
