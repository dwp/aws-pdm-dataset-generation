meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.5
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    terraform-bootstrap:
      task: terraform-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-pdm-dataset-generation
        inputs:
          - name: aws-pdm-dataset-generation
        outputs:
          - name: terraform-config

    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
        run:
          path: sh
          dir: aws-pdm-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-al2-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_pdm_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-pdm-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-al2-ami

    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_plan: -lock-timeout=300s
        run:
          path: sh
          dir: aws-pdm-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-al2-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_pdm_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -detailed-exitcode
        inputs:
          - name: aws-pdm-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-al2-ami

    terraform-output-management-infra:
      task: terraform-output-management-infra
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-management-infra/outputs.json
          dir: aws-management-infrastructure
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management-infra
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/hiverunner
        run:
          path: sh
          dir: aws-pdm-dataset-generation/steps
          args:
            - -exc
            - |
              mvn test
        inputs:
          - name: aws-pdm-dataset-generation
      input_mapping:
        aws-pdm-dataset-generation: aws-pdm-dataset-generation-pr

    vcs-to-s3:
      task: vcs-to-s3
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          S3_BUCKET: ((dataworks.bucket-list.development.published))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set -x
              RESOURCE=$(ls)
              cd $RESOURCE/$RESOURCE_ROOT
              aws s3 sync . s3://$S3_BUCKET/$S3_ROOT --exclude "*" --include "$RESOURCE_FILES"

    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              export topic_arn=arn:aws:sns:${AWS_DEFAULT_REGION}:${AWS_ACC}:adg_completion_status_sns
              export message_json=$(cat <<EOF
              {
                "correlation_id": "$CORRELATION_ID",
                "s3_prefix": "$S3_PREFIX"
              }
              EOF
              )
              echo $message_json
              aws sns publish --topic-arn "$topic_arn" --message "$message_json"

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("pdm-dataset-generator")) | .Id');
              do
                aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done

    terraform-bootstrap-crown:
      task: terraform-bootstrap-crown
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.5
            tag: 0.0.5
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config-crown
              cp terraform.tfvars ../terraform-config-crown
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config-crown
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2

    terraform-output-common:
      task: terraform-output-common
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        run:
          path: sh
          args:
            - -exc
            - |
              pwd
              cp ../terraform-config-crown/terraform.tf .
              cp ../terraform-config-crown/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-common/outputs.json
          dir: aws-common-infrastructure
        inputs:
          - name: aws-common-infrastructure
          - name: terraform-config-crown
        outputs:
          - name: terraform-output-common
        params:
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: "false"
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))

    create-aws-profiles:
      task: create-aws-profiles
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        outputs:
          - name: .aws
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        run:
          path: sh
          args:
            - -exc
            - |
              cat <<EOF> .aws/credentials
              [default]
              region = eu-west-1
              aws_access_key_id = $AWS_ACCESS_KEY_ID
              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY

              [ci]
              region = eu-west-1
              role_arn = $AWS_ROLE
              source_profile = default
              s3 =
                max_concurrent_requests = 5
                signature_version = s3v4
              EOF

    create-crown-credentials:
      task: create-crown-credentials
      attempts: 15
      input_mapping:
        git-repo: aws-pdm-dataset-generation
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: git-repo
        outputs:
          - name: ssh-credentials
        params:
          PRIVATE_KEY: ((crown.private_key))
        run:
          path: sh
          dir: ssh-credentials
          args:
            - -exc
            - |
              cat <<EOF> id_rsa
              $PRIVATE_KEY
              EOF
              mv ../git-repo/ci/templates/ssh_config.tpl ./config
              chmod 400 id_rsa

    get-transactional-files:
      task: get-transactional-files
      attempts: 50
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: ssh-credentials
        outputs:
          - name: pdm_transactional_tables
        params:
          RETRY_SLEEP_TIME: 600
          TARGET_SERVER: "hdp-edge01.node.prd.dw"
        run:
          path: sh
          args:
            - -exc
            - |
              whoami
              cp -R ssh-credentials ~/.ssh
              scp -r -o StrictHostKeyChecking=no hdp-edge01.node.prd.dw:${SOURCE_PATH}/* pdm_transactional_tables/

    load-s3:
      task: load-s3
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: pdm_transactional_tables
          - name: .aws
          - name: terraform-output-common
        params:
          AWS_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
        run:
          path: sh
          args:
            - -exc
            - |
              AWS_PUBLISHED_BUCKET="$(cat terraform-output-common/outputs.json |  jq -r '.published_bucket.value.id')"
              aws s3 --endpoint-url=https://s3-eu-west-1.amazonaws.com sync pdm_transactional_tables/ s3://${AWS_PUBLISHED_BUCKET}/common-model-inputs/transactional_data
