meta:
  plan:
    object-tagging-batch:
      task: object-tagging-batch
      attempts: 1
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: meta
        params:
          AWS_DEFAULT_REGION: eu-west-2
          TIMEOUT: 90   # Time (in minutes) to wait for job to complete
          BATCH_JOB_DEFINITION: pdm_object_tagger_job
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              pipeline_name=`cat "meta/build_pipeline_name"`
              job_name=`cat "meta/build_job_name"`
              build_number=`cat "meta/build_name"`
              job_id=$(aws batch submit-job --job-queue pdm_object_tagger --job-definition ${BATCH_JOB_DEFINITION} \
                --job-name ${pipeline_name}_${job_name}_${build_number} \
                --parameters manifest='{"test": "test_pipeline"}' \
                | jq -e --raw-output .jobId)
              i=0
              set +x
              while [[ ${i} -le ${TIMEOUT} ]]
              do
                status=$(aws batch describe-jobs --jobs ${job_id} | jq -e --raw-output '.jobs[0].status')
                if [ "$status" == "FAILED" ]; then
                  echo "job failed"
                  exit 1
                fi
                if [ "$status" == "SUCCEEDED" ]; then
                  echo "job succeeded"
                  exit 0
                fi
                echo "job is currently ${status}"
                i=$((i+1))
                sleep 60
              done
              exit 1

    rbac-csv-upload:
      task: rbac-csv-upload
      attempts: 1
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: dataworks-aws-rbac
        params:
          AWS_DEFAULT_REGION: eu-west-2
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              # ls
              # cd dataworks-aws-rbac
              # ls
              aws s3 cp dataworks-aws-rbac/README.md s3://${S3_BUCKET}/marktest.md 
